# -*- coding: utf-8 -*-
"""puliyurkesikan_bert_nlp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eF__Fz3Jb4GNTRf4vPFJb0XaZft2xTA1
"""

!pip3 install ktrain

!pip install transformers

!pip install Open-Tamil

!pip install johnsnowlabs

!pip install nlp

import pandas as pd
import numpy as np
import seaborn as sns
import tamil
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from collections import defaultdict
import nltk
import torch
import nlp
import torch.nn.functional as F
from torch import nn, optim
from torch.utils.data import Dataset, DataLoader
from sklearn.metrics import confusion_matrix, classification_report

import pandas as pd
from sklearn.model_selection import train_test_split

from transformers import BertModel, BertTokenizer, AdamW, get_linear_schedule_with_warmup

"""https://proceedings.neurips.cc/paper_files/paper/2015/file/afdec7005cc9f14302cd0474fd0f3c96-Paper.pdf

NLP : Language Detection in Python {in தமிழ்}
"""

!pip install TextBlob

from textblob import TextBlob

from nltk.corpus import gutenberg
from nltk import FreqDist
# For plotting, we need matplotlib (get it from the NLTK download page)
import matplotlib
import matplotlib.pyplot as plt
# Count each token in each text of the Gutenberg collection
fd = FreqDist()
for text in gutenberg.fileids():
  for word in gutenberg.words(text):
    fd.inc(word)
# Initialize two empty lists which will hold our ranks and frequencies
ranks = []
freqs = []
# Generate a (rank, frequency) point for each counted token and
# and append to the respective lists, Note that the iteration
# over fd is automatically sorted.
for rank, word in enumerate(fd):
  ranks.append(rank+1)
  freqs.append(fd[word])

# Plot rank vs frequency on a log−log plot and show the plot
plt.loglog(ranks, freqs)
plt.xlabel(’frequency(f)’, fontsize=14, fontweight=’bold’)
plt.ylabel(’rank(r)’, fontsize=14, fontweight=’bold’)
plt.grid(True)
plt.show()

bestwriter=pd.read_csv('puliyurkesikan_bert.csv')
print(bestwriter.info())

bestwriter=pd.read_csv('puliyurkesikan_bert.csv')
bestwriter.head()

bestwriter=pd.read_csv('puliyurkesikan_bert.csv')
bestwriter.tail()

bestwriter=pd.read_csv('puliyurkesikan_bert.csv')
bestwriter.describe()

bestwriter=pd.read_csv('puliyurkesikan_bert.csv')
table=pd.DataFrame(bestwriter)
print(table)

புலியூர்க்கேசிகன்_உரை= pd.read_csv('புலியூர்க்கேசின்_உரைமதிப்பாய்வு.csv')
புலியூர்க்கேசிகன்_உரை.head()

புலியூர்க்கேசிகன்_உரை.tail()

"""**NLTK Moddls in English**"""

# Download Indian corpus
nltk.download('indian')

# Import Indian corpus
from nltk.corpus import indian

# Show words from each text
for text in indian.fileids():
    print(text, indian.words(text)[:5])

import nltk
from nltk.corpus import gutenberg
nltk.download('gutenberg')

gutenberg.fileids()

emma = gutenberg.words('austen-emma.txt')
print(len(emma))
print(emma)

emma_text = nltk.Text(gutenberg.words('austen-emma.txt'))
print(emma_text,len(emma_text))

"""**புலியூர்க் கேசிகன்**

முத்தமிழ் நூல் ஆய்வு
"""

முத்தமிழ் = pd.read_csv ("puliyur_muthamizh.csv")
print(முத்தமிழ்)

முத்தமிழ் = pd.read_csv("புலியூர்_முத்தமிழ்.csv")
print(முத்தமிழ்)

#!/usr/bin/python
 # -*- coding: utf-8 -*-
முத்தமிழ் = pd.read_csv("புலியூர்_முத்தமிழ்.csv")
முத்தமிழ்_ஆய்வு = nltk.Text(முத்தமிழ்)
print(முத்தமிழ்_ஆய்வு,len(முத்தமிழ்_ஆய்வு))

import csv

முத்தமிழ்பிரி = முத்தமிழ்.split()

def முத்தமிழ்(x): return -3*x**2 + 2*x + 20

def plot_function(முத்தமிழ், min=-2.1, max=2.1, color='r'):
    x = np.linspace(min,max, 100)[:,None]
    plt.plot(x, முத்தமிழ்(x), color)
    print(plt.plot)

plot_function(முத்தமிழ்)

def noise(x, scale): return normal(scale=scale, size=x.shape)
def add_noise(x, mult, add): return x * (1+noise(x,mult)) + noise(x,add)

x = np.linspace(-2, 2, num=20)[:,None]
y = add_noise(முத்தமிழ்(x), 0.2, 1.3)
plt.scatter(x,y);

eval_df = pd.read_csv('புலியூர்_முத்தமிழ்.csv')
eval_df.describe()

from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline

def plot_poly(degree):
    model = make_pipeline(PolynomialFeatures(degree), LinearRegression())
    model.fit(x, y)
    plt.scatter(x,y)
    plot_function(model.predict)

plot_poly(1)

import tamil

print(len(முத்தமிழ்))

